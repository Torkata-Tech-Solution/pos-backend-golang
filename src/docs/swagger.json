{
    "swagger": "2.0",
    "info": {
        "description": "A comprehensive Point of Sale (POS) backend system built with Go and Fiber framework. This API provides endpoints for managing users, businesses, outlets, products, sales, customers, and all other POS-related operations.",
        "title": "POS Backend API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/indrayyana/go-fiber-boilerplate/blob/main/LICENSE"
        },
        "version": "1.0.0"
    },
    "host": "localhost:3000",
    "basePath": "/v1",
    "paths": {
        "/auth/forgot-password": {
            "post": {
                "description": "An email will be sent to reset password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.ForgotPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.ForgotPasswordResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/auth/google": {
            "get": {
                "description": "This route initiates the Google OAuth2 login flow. Please try this in your browser.",
                "tags": [
                    "Auth"
                ],
                "summary": "Login with google",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GoogleLoginResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/example.FailedLogin"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.LogoutResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/auth/refresh-tokens": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh auth tokens",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.RefreshTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register as user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.Register"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.RegisterResponse"
                        }
                    },
                    "409": {
                        "description": "Email already taken",
                        "schema": {
                            "$ref": "#/definitions/example.DuplicateEmail"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The reset password token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdatePassOrVerify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.ResetPasswordResponse"
                        }
                    },
                    "401": {
                        "description": "Password reset failed",
                        "schema": {
                            "$ref": "#/definitions/example.FailedResetPassword"
                        }
                    }
                }
            }
        },
        "/auth/send-verification-email": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "An email will be sent to verify email.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Send verification email",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.SendVerificationEmailResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/auth/verify-email": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The verify email token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.VerifyEmailResponse"
                        }
                    },
                    "401": {
                        "description": "Verify email failed",
                        "schema": {
                            "$ref": "#/definitions/example.FailedVerifyEmail"
                        }
                    }
                }
            }
        },
        "/business-users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all business users with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business User"
                ],
                "summary": "Get all business users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of business users",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or email",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by business ID",
                        "name": "businessId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role",
                        "name": "role",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedBusinessUsers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new business user (assign user to business)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business User"
                ],
                "summary": "Create new business user",
                "parameters": [
                    {
                        "description": "Business user data",
                        "name": "businessUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateBusinessUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBusinessUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "User already assigned to this business",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/business-users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific business user by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business User"
                ],
                "summary": "Get business user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBusinessUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Business user not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing business user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business User"
                ],
                "summary": "Update business user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Business user data to update",
                        "name": "businessUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateBusinessUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBusinessUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Business user not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a business user by ID (remove user from business)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business User"
                ],
                "summary": "Delete business user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Business user not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/businesses": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all businesses with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business"
                ],
                "summary": "Get all businesses",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of businesses",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or address",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedBusinesses"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new business",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business"
                ],
                "summary": "Create new business",
                "parameters": [
                    {
                        "description": "Business data",
                        "name": "business",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateBusiness"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBusiness"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Business domain already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/businesses/{businessId}/outlets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all outlets for a specific business",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet"
                ],
                "summary": "Get outlets by business ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business ID",
                        "name": "businessId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedOutlets"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/businesses/{businessId}/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all users for a specific business",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business User"
                ],
                "summary": "Get business users by business ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business ID",
                        "name": "businessId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedBusinessUsers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/businesses/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific business by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business"
                ],
                "summary": "Get business by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBusiness"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Business not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing business",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business"
                ],
                "summary": "Update business",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Business data to update",
                        "name": "business",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateBusiness"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBusiness"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Business not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Business domain already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a business by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Business"
                ],
                "summary": "Delete business",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Business not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/coupons": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all coupons with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "Get all coupons",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of coupons",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by code or name",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by outlet ID",
                        "name": "outletId",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedCoupons"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new coupon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "Create new coupon",
                "parameters": [
                    {
                        "description": "Coupon data",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateCoupon"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithCoupon"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Coupon code already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/coupons/code/{code}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific coupon by its code",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "Get coupon by code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon Code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Outlet ID (optional)",
                        "name": "outletId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithCoupon"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Coupon not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/coupons/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific coupon by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "Get coupon by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithCoupon"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Coupon not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing coupon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "Update coupon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Coupon data to update",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateCoupon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithCoupon"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Coupon not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Coupon code already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a coupon by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "Delete coupon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Coupon not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all customers with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get all customers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of customers",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or email or phone",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedCustomers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Create new customer",
                "parameters": [
                    {
                        "description": "Customer data",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateCustomer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithCustomer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Customer email already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/customers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific customer by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get customer by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithCustomer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Update customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer data to update",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateCustomer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithCustomer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Customer email already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a customer by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Delete customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/health-check": {
            "get": {
                "description": "Check the status of services and database connections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.HealthCheckResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.HealthCheckResponseError"
                        }
                    }
                }
            }
        },
        "/outlet-staff": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all outlet staff with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet Staff"
                ],
                "summary": "Get all outlet staff",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of staff",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or email",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by outlet ID",
                        "name": "outletId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role",
                        "name": "role",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedOutletStaff"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new outlet staff member",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet Staff"
                ],
                "summary": "Create new outlet staff",
                "parameters": [
                    {
                        "description": "Outlet staff data",
                        "name": "staff",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateOutletStaff"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithOutletStaff"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "User already assigned to this outlet",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/outlet-staff/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific outlet staff by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet Staff"
                ],
                "summary": "Get outlet staff by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outlet Staff ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithOutletStaff"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Outlet staff not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing outlet staff member",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet Staff"
                ],
                "summary": "Update outlet staff",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outlet Staff ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Outlet staff data to update",
                        "name": "staff",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateOutletStaff"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithOutletStaff"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Outlet staff not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an outlet staff member by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet Staff"
                ],
                "summary": "Delete outlet staff",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outlet Staff ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Outlet staff not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/outlets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all outlets with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet"
                ],
                "summary": "Get all outlets",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of outlets",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or address",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedOutlets"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new outlet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet"
                ],
                "summary": "Create new outlet",
                "parameters": [
                    {
                        "description": "Outlet data",
                        "name": "outlet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateOutlet"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithOutlet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Outlet already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/outlets/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific outlet by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet"
                ],
                "summary": "Get outlet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outlet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithOutlet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Outlet not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing outlet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet"
                ],
                "summary": "Update outlet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outlet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Outlet data to update",
                        "name": "outlet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateOutlet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithOutlet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Outlet not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an outlet by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet"
                ],
                "summary": "Delete outlet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outlet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Outlet not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/outlets/{outletId}/printers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all printers for a specific outlet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Printer"
                ],
                "summary": "Get printers by outlet ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outlet ID",
                        "name": "outletId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedPrinters"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/outlets/{outletId}/staff": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all staff for a specific outlet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Outlet Staff"
                ],
                "summary": "Get outlet staff by outlet ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outlet ID",
                        "name": "outletId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedOutletStaff"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/outlets/{outletId}/tables": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all tables for a specific outlet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Table"
                ],
                "summary": "Get tables by outlet ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Outlet ID",
                        "name": "outletId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedTables"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/payment-methods": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all payment methods with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Method"
                ],
                "summary": "Get all payment methods",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of payment methods",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or type",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedPaymentMethods"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new payment method",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Method"
                ],
                "summary": "Create new payment method",
                "parameters": [
                    {
                        "description": "Payment method data",
                        "name": "paymentMethod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreatePaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaymentMethod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Payment method name already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/payment-methods/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific payment method by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Method"
                ],
                "summary": "Get payment method by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment Method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaymentMethod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Payment method not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing payment method",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Method"
                ],
                "summary": "Update payment method",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment Method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment method data to update",
                        "name": "paymentMethod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdatePaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaymentMethod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Payment method not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Payment method name already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a payment method by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Method"
                ],
                "summary": "Delete payment method",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment Method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Payment method not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/printers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all printers with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Printer"
                ],
                "summary": "Get all printers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of printers",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or type",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by outlet ID",
                        "name": "outletId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedPrinters"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new printer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Printer"
                ],
                "summary": "Create new printer",
                "parameters": [
                    {
                        "description": "Printer data",
                        "name": "printer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreatePrinter"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPrinter"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Printer name already exists in outlet",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/printers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific printer by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Printer"
                ],
                "summary": "Get printer by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Printer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPrinter"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Printer not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing printer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Printer"
                ],
                "summary": "Update printer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Printer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Printer data to update",
                        "name": "printer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdatePrinter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPrinter"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Printer not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Printer name already exists in outlet",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a printer by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Printer"
                ],
                "summary": "Delete printer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Printer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Printer not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/product-categories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all product categories with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product Category"
                ],
                "summary": "Get all product categories",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of categories",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or description",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedProductCategories"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new product category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product Category"
                ],
                "summary": "Create new product category",
                "parameters": [
                    {
                        "description": "Product category data",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateProductCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithProductCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/product-categories/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific product category by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product Category"
                ],
                "summary": "Get product category by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithProductCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Product category not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing product category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product Category"
                ],
                "summary": "Update product category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product category data to update",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateProductCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithProductCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Product category not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a product category by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product Category"
                ],
                "summary": "Delete product category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Product category not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all products with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get all products",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of products",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or description",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedProducts"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Create new product",
                "parameters": [
                    {
                        "description": "Product data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateProduct"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific product by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Update product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product data to update",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a product by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/sales": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all sales with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sale"
                ],
                "summary": "Get all sales",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of sales",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by invoice number or customer name",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by outlet ID",
                        "name": "outletId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by customer ID",
                        "name": "customerId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (pending, completed, cancelled)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by date from (YYYY-MM-DD)",
                        "name": "dateFrom",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by date to (YYYY-MM-DD)",
                        "name": "dateTo",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedSales"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new sale transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sale"
                ],
                "summary": "Create new sale",
                "parameters": [
                    {
                        "description": "Sale data",
                        "name": "sale",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateSale"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSale"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Invoice number already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/sales/invoice/{invoiceNumber}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific sale by its invoice number",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sale"
                ],
                "summary": "Get sale by invoice number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice Number",
                        "name": "invoiceNumber",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSale"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Sale not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/sales/report": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get sales report with various aggregations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sale"
                ],
                "summary": "Get sales report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by outlet ID",
                        "name": "outletId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by date from (YYYY-MM-DD)",
                        "name": "dateFrom",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by date to (YYYY-MM-DD)",
                        "name": "dateTo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group by (day, week, month, year)",
                        "name": "groupBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSalesReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/sales/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific sale by its ID with items details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sale"
                ],
                "summary": "Get sale by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sale ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSale"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Sale not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing sale",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sale"
                ],
                "summary": "Update sale",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sale ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sale data to update",
                        "name": "sale",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateSale"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSale"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Sale not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a sale by ID (soft delete)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sale"
                ],
                "summary": "Delete sale",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sale ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Sale not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/sales/{id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the status of a sale (pending, completed, cancelled)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sale"
                ],
                "summary": "Update sale status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sale ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sale status data",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateSaleStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSale"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Sale not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all settings with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Get all settings",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of settings",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by key or description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by outlet ID",
                        "name": "outletId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedSettings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new setting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Create new setting",
                "parameters": [
                    {
                        "description": "Setting data",
                        "name": "setting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateSetting"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSetting"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Setting key already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/settings/key/{key}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific setting by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Get setting by key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Setting Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Outlet ID (optional)",
                        "name": "outletId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSetting"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Setting not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/settings/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific setting by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Get setting by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Setting ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSetting"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Setting not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing setting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Update setting",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Setting ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Setting data to update",
                        "name": "setting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSetting"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Setting not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Setting key already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a setting by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Delete setting",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Setting ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Setting not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/tables": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all tables with pagination and search functionality",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Table"
                ],
                "summary": "Get all tables",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of tables",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by table number or name",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by outlet ID",
                        "name": "outletId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginatedTables"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Table"
                ],
                "summary": "Create new table",
                "parameters": [
                    {
                        "description": "Table data",
                        "name": "table",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateTable"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithTable"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Table number already exists in outlet",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/tables/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific table by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Table"
                ],
                "summary": "Get table by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithTable"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Table not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Table"
                ],
                "summary": "Update table",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Table data to update",
                        "name": "table",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateTable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithTable"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Table not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "409": {
                        "description": "Table number already exists in outlet",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a table by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Table"
                ],
                "summary": "Delete table",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "404": {
                        "description": "Table not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorDetails"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only admins can retrieve all users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of users",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or email or role",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetAllUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only admins can create other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.CreateUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "409": {
                        "description": "Email already taken",
                        "schema": {
                            "$ref": "#/definitions/example.DuplicateEmail"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch only their own user information. Only admins can fetch other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can delete only themselves. Only admins can delete other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.DeleteUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can only update their own information. Only admins can update other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UpdateUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    },
                    "409": {
                        "description": "Email already taken",
                        "schema": {
                            "$ref": "#/definitions/example.DuplicateEmail"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "example.CreateUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 201
                },
                "message": {
                    "type": "string",
                    "example": "Create user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.DeleteUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Delete user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.DuplicateEmail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 409
                },
                "message": {
                    "type": "string",
                    "example": "Email already taken"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedLogin": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Invalid email or password"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedResetPassword": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Password reset failed"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedVerifyEmail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Verify email failed"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.Forbidden": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 403
                },
                "message": {
                    "type": "string",
                    "example": "You don't have permission to access this resource"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.ForgotPasswordResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "A password reset link has been sent to your email address."
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetAllUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "message": {
                    "type": "string",
                    "example": "Get all users successfully"
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.User"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "total_pages": {
                    "type": "integer",
                    "example": 1
                },
                "total_results": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "example.GetUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Get user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.GoogleLoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Login successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/example.GoogleUser"
                }
            }
        },
        "example.GoogleUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "fake@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "e088d183-9eea-4a11-8d5d-74d7ec91bdf5"
                },
                "name": {
                    "type": "string",
                    "example": "fake name"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "verified_email": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "example.HealthCheck": {
            "type": "object",
            "properties": {
                "is_up": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Postgre"
                },
                "status": {
                    "type": "string",
                    "example": "Up"
                }
            }
        },
        "example.HealthCheckError": {
            "type": "object",
            "properties": {
                "is_up": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "failed to connect to 'host=localhost user=postgres database=wrongdb': server error (FATAL: database \"wrongdb\" does not exist (SQLSTATE 3D000))"
                },
                "name": {
                    "type": "string",
                    "example": "Postgre"
                },
                "status": {
                    "type": "string",
                    "example": "Down"
                }
            }
        },
        "example.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "is_healthy": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Health check completed"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.HealthCheck"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.HealthCheckResponseError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "is_healthy": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "Health check completed"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.HealthCheckError"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.LoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Login successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.LogoutResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Logout successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.NotFound": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "message": {
                    "type": "string",
                    "example": "Not found"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.RefreshToken": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
                }
            }
        },
        "example.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                }
            }
        },
        "example.RegisterResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 201
                },
                "message": {
                    "type": "string",
                    "example": "Register successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.ResetPasswordResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Update password successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.SendVerificationEmailResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Please check your email for a link to verify your account"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.TokenExpires": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string",
                    "example": "2024-10-07T11:56:46.618180553Z"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
                }
            }
        },
        "example.Tokens": {
            "type": "object",
            "properties": {
                "access": {
                    "$ref": "#/definitions/example.TokenExpires"
                },
                "refresh": {
                    "$ref": "#/definitions/example.TokenExpires"
                }
            }
        },
        "example.Unauthorized": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Please authenticate"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Update user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "fake@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "e088d183-9eea-4a11-8d5d-74d7ec91bdf5"
                },
                "name": {
                    "type": "string",
                    "example": "fake name"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "verified_email": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "example.VerifyEmailResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Verify email successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "model.Business": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "model.BusinessUser": {
            "type": "object",
            "properties": {
                "business_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.Coupon": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "discount_type": {
                    "type": "string"
                },
                "discount_value": {
                    "type": "number"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "max_uses": {
                    "type": "integer"
                },
                "outlet_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "used_count": {
                    "type": "integer"
                }
            }
        },
        "model.Customer": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "loyalty_points": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "outlet_id": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.Outlet": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "business_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "model.OutletStaff": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "outlet_id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.PaymentMethod": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "outlet_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.Printer": {
            "type": "object",
            "properties": {
                "connection_type": {
                    "type": "string"
                },
                "default_printer": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "mac_address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "outlet_id": {
                    "type": "string"
                },
                "paper_width": {
                    "type": "integer"
                }
            }
        },
        "model.Product": {
            "type": "object",
            "properties": {
                "business_id": {
                    "type": "string"
                },
                "category_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "model.ProductCategory": {
            "type": "object",
            "properties": {
                "business_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Sale": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "discount": {
                    "type": "number"
                },
                "grand_total": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "invoice_number": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "outlet_id": {
                    "type": "string"
                },
                "outlet_staff_id": {
                    "type": "string"
                },
                "payment_method_id": {
                    "type": "string"
                },
                "sale_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "table_id": {
                    "type": "string"
                },
                "tax": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "model.Setting": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "outlet_id": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.Table": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "outlet_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.Common": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.ErrorDetails": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "errors": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithBusiness": {
            "type": "object",
            "properties": {
                "business": {
                    "$ref": "#/definitions/model.Business"
                },
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithBusinessUser": {
            "type": "object",
            "properties": {
                "business_user": {
                    "$ref": "#/definitions/model.BusinessUser"
                },
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithCoupon": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "coupon": {
                    "$ref": "#/definitions/model.Coupon"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithCustomer": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "customer": {
                    "$ref": "#/definitions/model.Customer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithOutlet": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "outlet": {
                    "$ref": "#/definitions/model.Outlet"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithOutletStaff": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "outlet_staff": {
                    "$ref": "#/definitions/model.OutletStaff"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithPaginatedBusinessUsers": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.BusinessUser"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedBusinesses": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Business"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedCoupons": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Coupon"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedCustomers": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Customer"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedOutletStaff": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.OutletStaff"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedOutlets": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Outlet"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedPaymentMethods": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PaymentMethod"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedPrinters": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Printer"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedProductCategories": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProductCategory"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedProducts": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Product"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedSales": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Sale"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedSettings": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Setting"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaginatedTables": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Table"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithPaymentMethod": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/model.PaymentMethod"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithPrinter": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "printer": {
                    "$ref": "#/definitions/model.Printer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithProduct": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "product": {
                    "$ref": "#/definitions/model.Product"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithProductCategory": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "product_category": {
                    "$ref": "#/definitions/model.ProductCategory"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithSale": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "sale": {
                    "$ref": "#/definitions/model.Sale"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithSalesReport": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "report": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Sale"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithSetting": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "setting": {
                    "$ref": "#/definitions/model.Setting"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithTable": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "table": {
                    "$ref": "#/definitions/model.Table"
                }
            }
        },
        "validation.CreateBusiness": {
            "type": "object",
            "required": [
                "address",
                "domain",
                "name"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 255
                },
                "domain": {
                    "type": "string",
                    "maxLength": 255
                },
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "logo": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20
                },
                "website": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "validation.CreateBusinessUser": {
            "type": "object",
            "required": [
                "business_id",
                "role",
                "user_id"
            ],
            "properties": {
                "business_id": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "maxLength": 255
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "validation.CreateCoupon": {
            "type": "object",
            "required": [
                "code",
                "discount_type",
                "discount_value",
                "end_date",
                "max_uses",
                "outlet_id",
                "start_date"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 100
                },
                "description": {
                    "type": "string"
                },
                "discount_type": {
                    "type": "string",
                    "enum": [
                        "percentage",
                        "fixed"
                    ]
                },
                "discount_value": {
                    "type": "number",
                    "minimum": 0
                },
                "end_date": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "max_uses": {
                    "type": "integer",
                    "minimum": 1
                },
                "outlet_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "validation.CreateCustomer": {
            "type": "object",
            "required": [
                "email",
                "name",
                "outlet_id"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "loyalty_points": {
                    "type": "integer",
                    "minimum": 0
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "outlet_id": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 50
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "validation.CreateOutlet": {
            "type": "object",
            "required": [
                "address",
                "business_id",
                "name"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 255
                },
                "business_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20
                }
            }
        },
        "validation.CreateOutletStaff": {
            "type": "object",
            "required": [
                "name",
                "outlet_id",
                "password",
                "role"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "outlet_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                },
                "role": {
                    "type": "string",
                    "maxLength": 255
                },
                "username": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "validation.CreatePaymentMethod": {
            "type": "object",
            "required": [
                "name",
                "outlet_id",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "outlet_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "validation.CreatePrinter": {
            "type": "object",
            "required": [
                "connection_type",
                "name",
                "outlet_id"
            ],
            "properties": {
                "connection_type": {
                    "type": "string",
                    "maxLength": 50
                },
                "default_printer": {
                    "type": "boolean"
                },
                "ip_address": {
                    "type": "string",
                    "maxLength": 50
                },
                "mac_address": {
                    "type": "string",
                    "maxLength": 50
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "outlet_id": {
                    "type": "string"
                },
                "paper_width": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "validation.CreateProduct": {
            "type": "object",
            "required": [
                "business_id",
                "category_id",
                "name",
                "price"
            ],
            "properties": {
                "business_id": {
                    "type": "string"
                },
                "category_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "price": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "validation.CreateProductCategory": {
            "type": "object",
            "required": [
                "business_id",
                "name"
            ],
            "properties": {
                "business_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "validation.CreateSale": {
            "type": "object",
            "required": [
                "grand_total",
                "invoice_number",
                "outlet_id",
                "outlet_staff_id",
                "status",
                "table_id",
                "total"
            ],
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "discount": {
                    "type": "number",
                    "minimum": 0
                },
                "grand_total": {
                    "type": "number",
                    "minimum": 0
                },
                "invoice_number": {
                    "type": "string",
                    "maxLength": 50
                },
                "note": {
                    "type": "string"
                },
                "outlet_id": {
                    "type": "string"
                },
                "outlet_staff_id": {
                    "type": "string"
                },
                "payment_method_id": {
                    "type": "string"
                },
                "sale_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "paid",
                        "unpaid",
                        "void",
                        "hold"
                    ]
                },
                "table_id": {
                    "type": "string"
                },
                "tax": {
                    "type": "number",
                    "minimum": 0
                },
                "total": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "validation.CreateSetting": {
            "type": "object",
            "required": [
                "key",
                "outlet_id",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "maxLength": 100
                },
                "outlet_id": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "validation.CreateTable": {
            "type": "object",
            "required": [
                "capacity",
                "name",
                "outlet_id"
            ],
            "properties": {
                "capacity": {
                    "type": "integer",
                    "minimum": 1
                },
                "location": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "outlet_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "available",
                        "occupied",
                        "reserved"
                    ]
                }
            }
        },
        "validation.CreateUser": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                },
                "role": {
                    "type": "string",
                    "maxLength": 50,
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "example": "user"
                }
            }
        },
        "validation.ForgotPassword": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                }
            }
        },
        "validation.Login": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        },
        "validation.Register": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        },
        "validation.UpdateBusiness": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 255
                },
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "logo": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20
                },
                "website": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "validation.UpdateBusinessUser": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "validation.UpdateCoupon": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 100
                },
                "description": {
                    "type": "string"
                },
                "discount_type": {
                    "type": "string",
                    "enum": [
                        "percentage",
                        "fixed"
                    ]
                },
                "discount_value": {
                    "type": "number",
                    "minimum": 0
                },
                "end_date": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "max_uses": {
                    "type": "integer",
                    "minimum": 1
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "validation.UpdateCustomer": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "loyalty_points": {
                    "type": "integer",
                    "minimum": 0
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "validation.UpdateOutlet": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 255
                },
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20
                }
            }
        },
        "validation.UpdateOutletStaff": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                },
                "role": {
                    "type": "string",
                    "maxLength": 255
                },
                "username": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "validation.UpdatePassOrVerify": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        },
        "validation.UpdatePaymentMethod": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "type": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "validation.UpdatePrinter": {
            "type": "object",
            "properties": {
                "connection_type": {
                    "type": "string",
                    "maxLength": 50
                },
                "default_printer": {
                    "type": "boolean"
                },
                "ip_address": {
                    "type": "string",
                    "maxLength": 50
                },
                "mac_address": {
                    "type": "string",
                    "maxLength": 50
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "paper_width": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "validation.UpdateProduct": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "price": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "validation.UpdateProductCategory": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "validation.UpdateSale": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "discount": {
                    "type": "number",
                    "minimum": 0
                },
                "grand_total": {
                    "type": "number",
                    "minimum": 0
                },
                "note": {
                    "type": "string"
                },
                "payment_method_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "paid",
                        "unpaid",
                        "void",
                        "hold"
                    ]
                },
                "table_id": {
                    "type": "string"
                },
                "tax": {
                    "type": "number",
                    "minimum": 0
                },
                "total": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "validation.UpdateSaleStatus": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "paid",
                        "unpaid",
                        "void",
                        "hold"
                    ]
                }
            }
        },
        "validation.UpdateSetting": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "validation.UpdateTable": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer",
                    "minimum": 1
                },
                "location": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "available",
                        "occupied",
                        "reserved"
                    ]
                }
            }
        },
        "validation.UpdateUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Example Value: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}